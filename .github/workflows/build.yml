name: Build and Package Alacritty

on:
  schedule:
    - cron: '0 0 * * *'  
  workflow_dispatch:      

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_version.outputs.EXISTS == 'false' }}
      version: ${{ steps.check_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Check latest version
        id: check_version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/alacritty/alacritty/releases/latest | grep tag_name | cut -d '"' -f 4)
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          if git ls-remote --tags origin | grep -q $LATEST_VERSION; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check
    if: needs.check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev

      - name: Get Alacritty version
        id: get_version
        run: |
          VERSION=${{ needs.check.outputs.version }}
          echo "ALACRITTY_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Alacritty
        run: |
          chmod +x scripts/build.sh
          sudo ./scripts/build.sh ${{ env.ALACRITTY_VERSION }}

      - name: Package Alacritty
        run: |
          chmod +x scripts/package.sh
          sudo ./scripts/package.sh ${{ env.ALACRITTY_VERSION }}

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f "${{ env.ALACRITTY_VERSION }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: alacritty_*.deb
          tag_name: ${{ env.ALACRITTY_VERSION }}
          name: ${{ env.ALACRITTY_VERSION }}
          body: |
            Alacritty DEB package for version ${{ env.ALACRITTY_VERSION }}
          draft: false
          prerelease: false